//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class tqdm : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal tqdm(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(tqdm obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~tqdm() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cppPINVOKE.delete_tqdm(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public tqdm() : this(cppPINVOKE.new_tqdm(), true) {
  }

  public void reset() {
    cppPINVOKE.tqdm_reset(swigCPtr);
  }

  public void set_theme_line() {
    cppPINVOKE.tqdm_set_theme_line(swigCPtr);
  }

  public void set_theme_circle() {
    cppPINVOKE.tqdm_set_theme_circle(swigCPtr);
  }

  public void set_theme_braille() {
    cppPINVOKE.tqdm_set_theme_braille(swigCPtr);
  }

  public void set_theme_braille_spin() {
    cppPINVOKE.tqdm_set_theme_braille_spin(swigCPtr);
  }

  public void set_theme_basic() {
    cppPINVOKE.tqdm_set_theme_basic(swigCPtr);
  }

  public void set_label(SWIGTYPE_p_std__string label_) {
    cppPINVOKE.tqdm_set_label(swigCPtr, SWIGTYPE_p_std__string.getCPtr(label_));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void disable_colors() {
    cppPINVOKE.tqdm_disable_colors(swigCPtr);
  }

  public void finish() {
    cppPINVOKE.tqdm_finish(swigCPtr);
  }

  public void progress(int curr, int tot) {
    cppPINVOKE.tqdm_progress(swigCPtr, curr, tot);
  }

}
